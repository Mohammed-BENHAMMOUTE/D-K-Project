# This is my local development setup - keeps things simple but functional

services:
  # My React frontend - serves the UI on port 3000
  frontend:
    image: mohammedbenhammoute/frontend:1.0
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:80"
    environment:
      - VITE_API_URL=${VITE_API_URL}
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # Spring Boot backend - where all the business logic lives
  # Handles API requests and talks to Postgres
  backend:
    image: mohammedbenhammoute/backend:1.0
    container_name: backend-container
    ports:
      - "${BACKEND_PORT}:8080"
    environment:
      - DB_HOST=postgres-container
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - app-network

  # Database - using Bitnami's Postgres image because it's more secure
  # Keeps data persistent with a named volume
  postgres:
    image: bitnami/postgresql:17.2.0-debian-12-r3
    container_name: postgres-container
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

# Named volume for database - don't want to lose my data!
volumes:
  postgres_data:
    name: postgres_data

# Bridge network to let containers talk to each other
networks:
  app-network:
    name: app-network
    driver: bridge