# Production stack with high availability and load balancing
# Using Docker Swarm for orchestration and Traefik for routing

services:
  # Frontend running on manager nodes for security
  # Scaled to 2 replicas for redundancy
  frontend:
    image: mohammedbenhammoute/frontend:1.0
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        # Route traffic from aseds.inpt.com to this service
        - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
        - "traefik.http.services.frontend.loadbalancer.server.port=80"
        - "traefik.http.routers.frontend.entrypoints=web"
    networks:
      - traefik

  # Backend API service with 3 replicas
  # Using Traefik labels for automatic routing
  backend:
    image: mohammedbenhammoute/backend:1.0
    deploy:
      replicas: 3
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        # Route api.aseds.inpt.com to backend service
        - "traefik.http.routers.backend.rule=Host(`${API_DOMAIN}`)"
        - "traefik.http.services.backend.loadbalancer.server.port=${BACKEND_PORT}"
    environment:
      # Database connection settings
      - DB_HOST=pgpool
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - traefik
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Primary Postgres - this is my write master
  # Only one instance because we need consistent writes
  postgres-primary:
    image: postgres:17-alpine
    deploy:
      replicas: 1
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      # Persist data even if container restarts
      - postgres_primary_data:/var/lib/postgresql/data
    networks:
      - traefik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s

  # Read replica for scaling reads
  # Can add more replicas if needed
  postgres-replica:
    image: postgres:17-alpine
    deploy:
      replicas: 1
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    networks:
      - traefik
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s

  # PgPool for connection pooling and load balancing
  # Handles the primary/replica routing automatically
  pgpool:
    image: bitnami/pgpool:latest
    deploy:
      replicas: 1
    environment:
      # Configure primary and replica nodes
      - PGPOOL_BACKEND_NODES=0:postgres-primary:5432,1:postgres-replica:5432
      - PGPOOL_SR_CHECK_USER=${POSTGRES_USER}
      - PGPOOL_SR_CHECK_PASSWORD=${POSTGRES_PASSWORD}
      - PGPOOL_POSTGRES_USERNAME=${POSTGRES_USER}
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=admin123
      # Enable read/write splitting
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      - PGPOOL_MAX_POOL=20
    networks:
      - traefik
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5432", "-U", "postgres"]
      interval: 10s
      timeout: 5s

# Persistent volumes for database data
volumes:
  postgres_primary_data:
    driver: local
  postgres_replica_data:
    driver: local

# External traefik network for reverse proxy
networks:
  traefik:
    external: true
    name: traefik